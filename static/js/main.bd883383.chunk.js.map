{"version":3,"sources":["api/apiClient.ts","hooks/useComponentWillMount.ts","components/common/Loading.tsx","routes/Root.tsx","App.tsx","reportWebVitals.ts","style/GlobalStyles.ts","index.tsx","style/theme.ts"],"names":["axios","defaults","headers","post","apiClient","create","baseURL","process","timeout","useComponentWillMount","callback","willMount","useRef","current","FontBounce","keyframes","Background","styled","div","Loading","isLoading","Entrance","lazy","Intro","Main","Result","Root","basename","fallback","path","component","exact","App","useState","setIsLoading","interceptors","request","use","config","error","Promise","reject","response","MountedComponent","useMemo","isMobile","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","ReactDOM","render","theme","font","family","size","color","red","black","fontGray","backGray","border","radius","GlobalStyles","document","getElementById"],"mappings":"iHAAA,qBACAA,IAAMC,SAASC,QAAQC,KAAK,gBAAkB,kCAE9C,IACMC,EAAYJ,IAAMK,OAAO,CAC7BC,QAFcC,8BAGdC,QAAS,MAGIJ,O,mFCCAK,I,IAAAA,EARf,SAA+BC,GAC7B,IAAMC,EAAYC,kBAAO,GAErBD,EAAUE,SAASH,IAEvBC,EAAUE,SAAU,G,6CCLhBC,EAAaC,YAAH,8YAeVC,EAAaC,IAAOC,IAAV,4+BAaCJ,GAqDFK,MAnBf,YACE,OAD6C,EAA5BC,UAEf,eAACJ,EAAD,WACE,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,wCAGF,8BC3EEK,EAAWC,gBAAK,kBAAM,iCACtBC,EAAQD,gBAAK,kBAAM,uDACnBE,EAAOF,gBAAK,kBAAM,uDAClBG,EAASH,gBAAK,kBAAM,uDAiBXI,MAff,WACE,OACE,cAAC,IAAD,CAAeC,SAAUpB,eAAzB,SACE,cAAC,WAAD,CAAUqB,SAAU,cAAC,EAAD,CAASR,WAAW,IAAxC,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOS,KAAK,IAAIC,UAAWT,EAAUU,OAAK,IAC1C,cAAC,IAAD,CAAOF,KAAK,SAASC,UAAWP,IAChC,cAAC,IAAD,CAAOM,KAAK,QAAQC,UAAWN,IAC/B,cAAC,IAAD,CAAOK,KAAK,UAAUC,UAAWL,YC8B5BO,I,EAAAA,EAxCf,WACE,MAAkCC,oBAAS,GAA3C,mBAAOb,EAAP,KAAkBc,EAAlB,KAEAzB,GAAsB,WACpBL,IAAU+B,aAAaC,QAAQC,KAC7B,SAAUC,GAER,OADAJ,GAAa,GACNI,KAET,SAAUC,GAER,OADAL,GAAa,GACNM,QAAQC,OAAOF,MAI1BnC,IAAU+B,aAAaO,SAASL,KAC9B,SAAUK,GAER,OADAR,GAAa,GACNQ,KAET,SAAUH,GAER,OADAL,GAAa,GACNM,QAAQC,OAAOF,SAK5B,IAAMI,EAAmBC,mBACvB,kBAAOC,WAAW,cAAC,EAAD,IAAW,0GAC7B,IAGF,OACE,qCACE,cAAC,EAAD,CAASzB,UAAWA,IACnBuB,MC5BQG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OC4CCQ,EAlDKC,YAAH,26BCKjBC,IAASC,OACP,eAAC,IAAD,CAAeC,MCPkB,CACjCC,KAAM,CACJC,OAAQ,eACRC,KAAM,QAERC,MAAO,CACLC,IAAK,UACLC,MAAO,UACPC,SAAU,UACVC,SAAU,WAEZC,OAAQ,CACNC,OAAQ,SDLV,UACE,cAACC,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1B1B,M","file":"static/js/main.bd883383.chunk.js","sourcesContent":["import axios from 'axios';\naxios.defaults.headers.post['Content-Type'] = 'application/json; charset=UTF-8';\n\nconst baseURL = process.env.REACT_APP_BASE_URL;\nconst apiClient = axios.create({\n  baseURL,\n  timeout: 10000,\n});\n\nexport default apiClient;\n","import { useRef } from 'react';\n\nfunction useComponentWillMount(callback: () => void) {\n  const willMount = useRef(true);\n\n  if (willMount.current) callback();\n\n  willMount.current = false;\n}\n\nexport default useComponentWillMount;\n","import styled, { keyframes } from 'styled-components';\n\nconst FontBounce = keyframes` \n  100% {\n    top: -10px;\n    text-shadow: 0 1px 0 #CCC,\n                 0 2px 0 #CCC,\n                 0 3px 0 #CCC,\n                 0 4px 0 #CCC,\n                 0 5px 0 #CCC,\n                 0 6px 0 #CCC,\n                 0 7px 0 #CCC,\n                 0 8px 0 #CCC,\n                 0 9px 0 #CCC,\n                 0 50px 25px rgba(0, 0, 0, .2);\n  }\n`;\nconst Background = styled.div`\n  position: absolute;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgb(0, 0, 0, 0.7);\n\n  span {\n    position: relative;\n    top: 20px;\n    display: inline-block;\n    animation: ${FontBounce} 0.3s ease infinite alternate;\n    font-size: 3rem;\n    color: #fff;\n    text-shadow: 0 1px 0 #ccc, 0 2px 0 #ccc, 0 3px 0 #ccc, 0 4px 0 #ccc,\n      0 5px 0 #ccc, 0 6px 0 transparent, 0 7px 0 transparent,\n      0 8px 0 transparent, 0 9px 0 transparent, 0 10px 10px rgba(0, 0, 0, 0.4);\n\n    &:nth-child(2) {\n      animation-delay: 0.1s;\n    }\n    &:nth-child(3) {\n      animation-delay: 0.2s;\n    }\n    &:nth-child(4) {\n      animation-delay: 0.3s;\n    }\n    &:nth-child(5) {\n      animation-delay: 0.4s;\n    }\n    &:nth-child(6) {\n      animation-delay: 0.5s;\n    }\n    &:nth-child(7) {\n      animation-delay: 0.6s;\n    }\n    &:nth-child(8) {\n      animation-delay: 0.7s;\n    }\n  }\n`;\n\ninterface ILoadingProps {\n  isLoading?: boolean;\n}\nfunction Loading({ isLoading }: ILoadingProps) {\n  return isLoading ? (\n    <Background>\n      <span>L</span>\n      <span>o</span>\n      <span>a</span>\n      <span>d</span>\n      <span>i</span>\n      <span>n</span>\n      <span>g</span>\n      <span>.</span>\n      <span>.</span>\n      <span>.</span>\n    </Background>\n  ) : (\n    <></>\n  );\n}\n\nexport default Loading;\n","import { Suspense, lazy } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Loading from 'components/common/Loading';\n\nconst Entrance = lazy(() => import('components/quiz/Entrance'));\nconst Intro = lazy(() => import('components/quiz/Intro'));\nconst Main = lazy(() => import('components/quiz/Main'));\nconst Result = lazy(() => import('components/quiz/Result'));\n\nfunction Root() {\n  return (\n    <BrowserRouter basename={process.env.REACT_APP_BASE_NAME}>\n      <Suspense fallback={<Loading isLoading={true} />}>\n        <Switch>\n          <Route path=\"/\" component={Entrance} exact />\n          <Route path=\"/intro\" component={Intro} />\n          <Route path=\"/quiz\" component={Main} />\n          <Route path=\"/result\" component={Result} />\n        </Switch>\n      </Suspense>\n    </BrowserRouter>\n  );\n}\n\nexport default Root;\n","import apiClient from 'api/apiClient';\nimport useComponentWillMount from 'hooks/useComponentWillMount';\nimport { useMemo, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport Root from 'routes/Root';\nimport Loading from 'components/common/Loading';\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false);\n\n  useComponentWillMount(() => {\n    apiClient.interceptors.request.use(\n      function (config) {\n        setIsLoading(true);\n        return config;\n      },\n      function (error) {\n        setIsLoading(false);\n        return Promise.reject(error);\n      },\n    );\n\n    apiClient.interceptors.response.use(\n      function (response) {\n        setIsLoading(false);\n        return response;\n      },\n      function (error) {\n        setIsLoading(false);\n        return Promise.reject(error);\n      },\n    );\n  });\n\n  const MountedComponent = useMemo(\n    () => (isMobile ? <Root /> : <div>지원하지 않는 장비입니다.</div>),\n    [],\n  );\n\n  return (\n    <>\n      <Loading isLoading={isLoading} />\n      {MountedComponent}\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from 'styled-components';\n\n// https://www.npmjs.com/package/@fontsource/noto-sans-kr -> 폰트 쉽게 적용해봤는데 bold 처리가 안되서 일단 롤백함\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n  html {\n    margin: 0;\n    padding: 0;\n  }\n  body {\n    height: 100%;\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n  }\n  a {\n    color: inherit;\n    text-decoration: none;\n    cursor: pointer;\n\n    &:hover {\n      color: #fff;\n    }\n  }\n  input, button {\n    background-color: transparent;\n    border: none;\n    outline: none;\n  }\n  ol, ul, li {\n    list-style: none;\n  }\n  span {\n    font-stretch: normal;\n    font-style: normal;\n    letter-spacing: normal;\n  }\n  #root {\n    width: 100%;\n    min-height: 100vh;\n  }\n  select { \n    -webkit-appearance: none; /* 네이티브 외형 감추기 */ \n    -moz-appearance: none; \n    appearance: none; \n  }\n  /* IE 10, 11의 네이티브 화살표 숨기기 */ \n  select::-ms-expand { \n    display: none; \n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport GlobalStyles from 'style/GlobalStyles';\nimport { theme } from 'style/theme';\nimport { ThemeProvider } from 'styled-components';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <GlobalStyles />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { DefaultTheme } from \"styled-components\";\n\nexport const theme: DefaultTheme = {\n  font: {\n    family: \"Noto Sans KR\",\n    size: \"12px\",\n  },\n  color: {\n    red: \"#DA291C\",\n    black: \"#333333\",\n    fontGray: \"#999999\",\n    backGray: \"#E0E0E0\",\n  },\n  border: {\n    radius: \"10px\",\n  },\n};\n"],"sourceRoot":""}