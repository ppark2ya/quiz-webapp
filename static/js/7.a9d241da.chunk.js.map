{"version":3,"sources":["assets/mb_ic_select_arrow.svg","components/common/SelectBox.tsx","components/common/Input.tsx","api/quiz.ts","components/quiz/Intro.tsx","components/common/Button.tsx"],"names":["imagePath","require","default","Container","styled","div","props","theme","color","backGray","border","radius","red","SelectBox","label","register","required","options","style","className","optionList","map","o","value","htmlFor","memo","Input","min","max","type","placeholder","getOpenApi","params","apiClient","get","FormContainer","form","Intro","useForm","errors","formState","handleSubmit","history","useHistory","onSubmit","useCallback","formData","a","amount","category","difficulty","undefined","Number","data","response_code","push","pathname","state","results","window","alert","Button","marginTop","StyledButton","button"],"mappings":"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","file":"static/js/7.a9d241da.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mb_ic_select_arrow.9bd32fdd.svg\";","import { memo, CSSProperties } from 'react';\nimport styled from 'styled-components';\nimport { Path, UseFormRegister } from 'react-hook-form';\n\nconst imagePath = require('assets/mb_ic_select_arrow.svg').default;\n\nconst Container = styled.div`\n  display: flex;\n  align-content: center;\n  justify-content: flex-start;\n  align-items: center;\n  padding: 1vh 0;\n  label {\n    margin-right: 2vw;\n    width: 25%;\n    font-weight: bold;\n    font-size: 1.2rem;\n  }\n  select {\n    width: 60%;\n    background-color: white;\n    border: 1px solid ${(props) => props.theme.color.backGray};\n    border-radius: ${(props) => props.theme.border.radius};\n    background: url(${imagePath}) no-repeat 90% 50%;\n    background-size: 3.5vw;\n    padding: 3vw 10vw 3vw 5vw;\n    color: ${(props) => props.theme.color.red};\n    font-weight: bold;\n    font-size: 1.2rem;\n    margin-right: 2vw;\n  }\n`;\n\ninterface ISelectBoxProps<T = any> {\n  label: Path<T>;\n  register: UseFormRegister<T>;\n  required: boolean;\n  options: { value: string | number; label: string }[];\n  style?: CSSProperties;\n  className?: string;\n}\n\nfunction SelectBox({\n  label,\n  register,\n  required,\n  options,\n  style,\n  className,\n}: ISelectBoxProps) {\n  const optionList = options.map((o) => (\n    <option key={o.value} value={o.value}>\n      {o.label}\n    </option>\n  ));\n\n  return (\n    <Container className={className} style={style}>\n      <label htmlFor={label}>{label}</label>\n      <select {...register(label, { required })}>{optionList}</select>\n    </Container>\n  );\n}\n\nexport default memo(SelectBox);\n","import { memo, CSSProperties } from 'react';\nimport styled from 'styled-components';\nimport { Path, UseFormRegister } from 'react-hook-form';\n\nconst Container = styled.div`\n  display: flex;\n  align-content: center;\n  justify-content: flex-start;\n  align-items: center;\n  padding: 1vh 0;\n  label {\n    margin-right: 2vw;\n    width: 25%;\n    font-weight: bold;\n    font-size: 1.2rem;\n  }\n  input {\n    width: 60%;\n    border: 1px solid ${(props) => props.theme.color.backGray};\n    border-radius: ${(props) => props.theme.border.radius};\n    padding: 3vw 5vw;\n    font-size: 1.2rem;\n  }\n`;\n\ninterface IInputProps<T = any> {\n  label: Path<T>;\n  register: UseFormRegister<T>;\n  required?: boolean;\n  min?: number;\n  max?: number;\n  type?: string;\n  style?: CSSProperties;\n  className?: string;\n}\n\nfunction Input({\n  label,\n  register,\n  required,\n  min,\n  max,\n  type = 'text',\n  style,\n  className,\n}: IInputProps) {\n  return (\n    <Container className={className} style={style}>\n      <label htmlFor={label}>{label}</label>\n      <input\n        type={type}\n        {...register(label, { required, min, max })}\n        placeholder=\"Input number\"\n      />\n    </Container>\n  );\n}\n\nexport default memo(Input);\n","import apiClient from './apiClient';\nimport { IParams, ApiResponse } from './types';\n\n/**\n * @desc 퀴즈 질문 리스트 조회\n * @param amount: 퀴즈 개수(number)\n * @param category: 퀴즈 카테고리(number 9 ~ 32)\n * @param difficulty: 난이도('easy' | 'medium' | 'hard')\n * @result if response_code is 0: IResults[]\n */\nexport function getOpenApi(params: IParams) {\n  return apiClient.get<ApiResponse>(`/amount`, {\n    params: {\n      ...params,\n      type: 'multiple',\n    },\n  });\n}\n\nexport async function getOpenApiTest(params: IParams) {\n  try {\n    const { data } = await apiClient.get<ApiResponse>(`/amount`, {\n      params: {\n        ...params,\n        type: 'multiple',\n      },\n    });\n    return data;\n  } catch (e) {\n    return {\n      response_code: 1,\n    } as ApiResponse;\n  }\n}\n","import { useCallback } from 'react';\nimport { useForm } from 'react-hook-form';\nimport SelectBox from 'components/common/SelectBox';\nimport Input from 'components/common/Input';\nimport { getOpenApi } from 'api/quiz';\nimport { Difficulty, IParams } from 'api/types';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Button from 'components/common/Button';\n\nconst FormContainer = styled.form`\n  height: 100vh;\n  padding: 5vw;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  .title {\n    font-size: 1.4rem;\n    font-weight: bold;\n    text-align: center;\n    margin-bottom: 35px;\n  }\n  p {\n    color: ${(props) => props.theme.color.red};\n    font-weight: bold;\n  }\n`;\n\ninterface IFormInputs {\n  amount: number;\n  category: string;\n  difficulty: string;\n}\n\nfunction Intro() {\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n  } = useForm<IFormInputs>();\n  const history = useHistory();\n  const onSubmit = useCallback(async (formData: IFormInputs) => {\n    try {\n      const { amount, category, difficulty } = formData;\n      const params: IParams = {\n        amount,\n        category: category === 'any' ? undefined : Number(category),\n        difficulty:\n          difficulty === 'any' ? undefined : (difficulty as Difficulty),\n      };\n      const { data } = await getOpenApi(params);\n\n      if (data.response_code === 0) {\n        history.push({\n          pathname: '/quiz',\n          state: {\n            results: data.results!!,\n          },\n        });\n      } else {\n        window.alert('Failed to generate quiz. please try again.');\n      }\n    } catch (e) {\n      window.alert('Please check the network status!');\n    }\n  }, []);\n\n  return (\n    <FormContainer onSubmit={handleSubmit(onSubmit)}>\n      <div className=\"title\">\n        Please select the option of the quiz <br />\n        you want to solve\n      </div>\n      <Input\n        type=\"number\"\n        label=\"amount\"\n        register={register}\n        required\n        min={1}\n        max={50}\n      />\n      {errors.amount?.type === 'min' && (\n        <p>Your input required to be more than 0</p>\n      )}\n      {errors.amount?.type === 'max' && (\n        <p>Your input required to be less than 50</p>\n      )}\n      {errors.amount?.type === 'required' && <p>Your input required</p>}\n      <SelectBox\n        label=\"category\"\n        register={register}\n        required\n        options={[\n          { value: 'any', label: 'Any Category' },\n          { value: 9, label: 'General Knowledge' },\n          { value: 10, label: 'Entertainment: Books' },\n          { value: 11, label: 'Entertainment: Film' },\n          { value: 12, label: 'Entertainment: Music' },\n          { value: 13, label: 'Entertainment: Musicals &amp; Theatres' },\n          { value: 14, label: 'Entertainment: Television' },\n          { value: 15, label: 'Entertainment: Video Games' },\n          { value: 16, label: 'Entertainment: Board Games' },\n          { value: 17, label: 'Science &amp; Nature' },\n          { value: 18, label: 'Science: Computers' },\n          { value: 19, label: 'Science: Mathematics' },\n          { value: 20, label: 'Mythology' },\n          { value: 21, label: 'Sports' },\n          { value: 22, label: 'Geography' },\n          { value: 23, label: 'History' },\n          { value: 24, label: 'Politics' },\n          { value: 25, label: 'Art' },\n          { value: 26, label: 'Celebrities' },\n          { value: 27, label: 'Animals' },\n          { value: 28, label: 'Vehicles' },\n          { value: 29, label: 'Entertainment: Comics' },\n          { value: 30, label: 'Science: Gadgets' },\n          { value: 31, label: 'Entertainment: Japanese Anime &amp; Manga' },\n          { value: 32, label: 'Entertainment: Cartoon &amp; Animations' },\n        ]}\n      />\n      <SelectBox\n        label=\"difficulty\"\n        register={register}\n        required\n        options={[\n          { value: 'any', label: 'Any Difficulty' },\n          { value: 'easy', label: 'easy' },\n          { value: 'medium', label: 'medium' },\n          { value: 'hard', label: 'hard' },\n        ]}\n      />\n      <Button style={{ marginTop: '30px' }}>Getting Started</Button>\n    </FormContainer>\n  );\n}\n\nexport default Intro;\n","import styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  border-radius: ${(props) => props.theme.border.radius};\n  background-color: ${(props) => props.theme.color.red};\n  color: white;\n  font-weight: bold;\n  padding: 15px 15vw;\n  font-size: 1.2rem;\n`;\n\ninterface IButtonProps {\n  children?: React.ReactNode;\n  onClick?: (e?: React.MouseEvent) => void;\n  style?: React.CSSProperties;\n}\n\nfunction Button(props: IButtonProps) {\n  return <StyledButton type=\"submit\" {...props} />;\n}\n\nexport default Button;\n"],"sourceRoot":""}