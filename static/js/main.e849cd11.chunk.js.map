{"version":3,"sources":["api/apiClient.ts","api/quiz.ts","routes/Root.tsx","App.tsx","reportWebVitals.ts","style/GlobalStyles.ts","index.tsx","style/theme.ts"],"names":["axios","defaults","headers","post","apiClient","create","baseURL","process","timeout","getOpenApi","params","get","type","Root","basename","fallback","path","render","exact","App","useEffect","a","amount","difficulty","data","console","log","asyncGetOpenApi","isMobile","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","ReactDOM","StrictMode","theme","font","family","size","color","red","black","fontGray","backGray","border","radius","GlobalStyles","document","getElementById"],"mappings":"+MACAA,IAAMC,SAASC,QAAQC,KAAK,gBAAkB,kCAE9C,IAMeC,EALGJ,IAAMK,OAAO,CAC7BC,QAFcC,8BAGdC,QAAS,MCIJ,SAASC,EAAWC,GACzB,OAAON,EAAUO,IAAV,UAAsC,CAC3CD,OAAO,2BACFA,GADC,IAEJE,KAAM,e,kCCEGC,MAZf,WACE,OACE,cAAC,IAAD,CAAeC,SAAUP,GAAzB,SACE,cAAC,WAAD,CAAUQ,SAAU,6CAApB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAQ,kBAAM,sCAAeC,OAAK,WCa7CC,I,EAAAA,EAjBf,WAYE,OAXAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACyBZ,EAAW,CAChCa,OAAQ,GACRC,WAAY,SAHhB,gBACUC,EADV,EACUA,KAIRC,QAAQC,IAAIF,GALd,4CADc,uBAAC,WAAD,wBAQdG,KACC,IAGD,8BAAMC,WAAW,cAAC,EAAD,IAAW,2GCJjBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gBC2CCQ,EAjDKC,YAAH,i4BCKjBC,IAASvB,OACP,cAAC,IAAMwB,WAAP,UACE,eAAC,IAAD,CAAeC,MCRgB,CACjCC,KAAM,CACJC,OAAQ,eACRC,KAAM,QAERC,MAAO,CACLC,IAAK,UACLC,MAAO,UACPC,SAAU,UACVC,SAAU,WAEZC,OAAQ,CACNC,OAAQ,SDJR,UACE,cAACC,EAAD,IACA,cAAC,EAAD,SAGJC,SAASC,eAAe,SAM1B1B,M","file":"static/js/main.e849cd11.chunk.js","sourcesContent":["import axios from 'axios';\naxios.defaults.headers.post['Content-Type'] = 'application/json; charset=UTF-8';\n\nconst baseURL = process.env.REACT_APP_BASE_URL;\nconst apiClient = axios.create({\n  baseURL,\n  timeout: 10000,\n});\n\nexport default apiClient;\n","import apiClient from './apiClient';\nimport { IParams, ApiResponse } from './types';\n\n/**\n * @desc 퀴즈 질문 리스트 조회\n * @param amount: 퀴즈 개수(number)\n * @param category: 퀴즈 카테고리(number 9 ~ 32)\n * @param difficulty: 난이도('easy' | 'medium' | 'hard')\n * @result if response_code is 0: IResults[]\n */\nexport function getOpenApi(params: IParams) {\n  return apiClient.get<ApiResponse>(`/amount`, {\n    params: {\n      ...params,\n      type: 'multiple',\n    },\n  });\n}\n","import React, { Suspense, lazy } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\n// const Intro = lazy(() => import('components/mobile/intro/Intro'));\nfunction Root() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Suspense fallback={<div>loading...</div>}>\n        <Switch>\n          <Route path=\"/\" render={() => <div>12</div>} exact />\n        </Switch>\n      </Suspense>\n    </BrowserRouter>\n  );\n}\n\nexport default Root;\n","import { useEffect } from 'react';\nimport { getOpenApi } from 'api/quiz';\nimport { isMobile } from 'react-device-detect';\nimport Root from 'routes/Root';\n\nfunction App() {\n  useEffect(() => {\n    async function asyncGetOpenApi() {\n      const { data } = await getOpenApi({\n        amount: 10,\n        difficulty: 'hard',\n      });\n      console.log(data);\n    }\n    asyncGetOpenApi();\n  }, []);\n\n  return (\n    <div>{isMobile ? <Root /> : <div>지원하지 않는 장비입니다.</div>}</div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from 'styled-components';\n\n// https://www.npmjs.com/package/@fontsource/noto-sans-kr -> 폰트 쉽게 적용해봤는데 bold 처리가 안되서 일단 롤백함\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n  html {\n    margin: 0;\n    padding: 0;\n  }\n  body {\n    height: 100%;\n    margin: 0;\n  }\n  a {\n    color: inherit;\n    text-decoration: none;\n    cursor: pointer;\n\n    &:hover {\n      color: #fff;\n    }\n  }\n  input, button {\n    background-color: transparent;\n    border: none;\n    outline: none;\n  }\n  ol, ul, li {\n    list-style: none;\n  }\n  span {\n    font-stretch: normal;\n    font-style: normal;\n    letter-spacing: normal;\n  }\n  #root {\n    width: 100%;\n    min-height: 100vh;\n  }\n  select { \n    -webkit-appearance: none; /* 네이티브 외형 감추기 */ \n    -moz-appearance: none; \n    appearance: none; \n  }\n  /* IE 10, 11의 네이티브 화살표 숨기기 */ \n  select::-ms-expand { \n    display: none; \n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport GlobalStyles from 'style/GlobalStyles';\nimport { theme } from 'style/theme';\nimport { ThemeProvider } from 'styled-components';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { DefaultTheme } from \"styled-components\";\n\nexport const theme: DefaultTheme = {\n  font: {\n    family: \"Noto Sans KR\",\n    size: \"12px\",\n  },\n  color: {\n    red: \"#DA291C\",\n    black: \"#333333\",\n    fontGray: \"#999999\",\n    backGray: \"#E0E0E0\",\n  },\n  border: {\n    radius: \"10px\",\n  },\n};\n"],"sourceRoot":""}