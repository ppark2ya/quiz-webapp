{"version":3,"sources":["hooks/useInterval.ts","hooks/useQuiz.ts","components/quiz/QuizItem.tsx","components/quiz/Main.tsx","components/common/Button.tsx"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useQuiz","results","useState","progressTime","setProgressTime","quizItems","setQuizItems","currentIndex","setCurrentIndex","quizCount","setQuizCount","history","useHistory","newQuizItems","reduce","quiz","idx","currentAnswers","correct_answer","incorrect_answers","allAnswers","i","selectIndex","Math","floor","random","length","splice","prev","onSelectQuizItem","useCallback","selectedAnswer","prevState","userAnswer","goResultPage","push","pathname","state","onNextQuiz","QuizContainer","styled","div","props","quizId","theme","color","red","border","radius","QuizAnswer","li","currentAnswer","NextButton","Button","QuizItem","quizItem","difficulty","question","isLast","handleClick","className","dangerouslySetInnerHTML","__html","map","ans","onClick","Main","location","useLocation","isEmpty","StyledButton","button","type"],"mappings":"mKAkBeA,MAhBf,SAA8BC,EAAaC,GACzC,IAAMC,EAAkDC,iBAAU,MAElEC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAEJI,qBAAU,WAIR,IAAME,EAAKC,aAHX,WACGL,EAAsBG,YAEIJ,GAC7B,OAAO,kBAAMO,cAAcF,MAC1B,CAACL,KCwFSQ,I,MAAAA,EAnFf,SAAiBC,GACf,MAAwCC,mBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,qBAAlC,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAwCJ,mBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAAkCN,mBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACMC,EAAUC,cAEhBjB,qBAAU,WAAO,IAAD,EAERkB,EAAY,OAAGZ,QAAH,IAAGA,OAAH,EAAGA,EAASa,QAC5B,SAACD,EAA2BE,EAAMC,GAGhC,IAFA,IAAMC,EAAc,CAAIF,EAAKG,gBAAT,mBAA4BH,EAAKI,oBAC/CC,EAAa,GACVC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IACMC,EADOC,KAAKC,MAAMD,KAAKE,SAALF,KAAA,IAAgB,EAAK,KAClBN,EAAeS,OAC1CN,EAAWC,GAAKJ,EAAeK,GAC/BL,EAAeU,OAAOL,EAAa,GAOrC,OALAT,EAAaG,GAAb,2BACKD,GADL,IAEElB,GAAImB,EACJI,eAEKP,IAET,IAEFP,EAAaO,GACbH,EAAY,iBAACG,QAAD,IAACA,OAAD,EAACA,EAAca,cAAf,QAAyB,KACpC,CAACzB,IAEJX,GAAY,WACVc,GAAgB,SAACwB,GAAD,OAAUA,EAAO,OAChC,KAEH,IAAMC,EAAmBC,uBAAY,SAACjC,EAAYkC,GAChDzB,GAAa,SAAC0B,GAAD,cACXA,QADW,IACXA,OADW,EACXA,EAAWlB,QAAO,SAACD,EAA2BE,EAAMC,GAWlD,OATEH,EAAaG,GADXnB,IAAOmB,EACT,2BACKD,GADL,IAEEkB,WAAYF,IAGd,eACKhB,GAGAF,IACN,SAEJ,IAEGqB,EAAeJ,uBAAY,WAC/BnB,EAAQwB,KAAK,CACXC,SAAU,UACVC,MAAO,CACLpC,QAAS,CACPE,eACAE,kBAIL,CAACF,EAAcE,IAEZiC,EAAaR,uBAAY,WACzBvB,EAAe,IAAME,EACvBD,GAAgB,SAACoB,GAAD,OAAUA,EAAO,KAEjCM,MAED,CAAC3B,EAAcE,EAAWyB,IAE7B,MAAO,CACL/B,eACAE,YACAE,eACAsB,mBACAS,e,+BC9FEC,EAAgBC,IAAOC,IAAV,mqBAWA,SAACC,GAAD,OAAWA,EAAMC,OAAS,KAU3B,SAACD,GAAD,OAAWA,EAAME,MAAMC,MAAMC,OAC1B,SAACJ,GAAD,OAAWA,EAAME,MAAMG,OAAOC,UAgB7CC,EAAaT,IAAOU,GAAV,2CAKL,SAACR,GACR,OACEA,EAAMS,gBAAkBT,EAAMT,YAC9BS,EAAMxB,iBAAmBwB,EAAMS,cAExBT,EAAME,MAAMC,MAAMC,IAEzBJ,EAAMT,YACNS,EAAMxB,iBAAmBwB,EAAMS,cAEzB,eAJD,KASLC,EAAaZ,YAAOa,IAAPb,CAAH,qGACA,SAACE,GAAD,OAAYA,EAAMT,WAAa,aAAe,YACjD,SAACS,GAAD,OAAYA,EAAMT,WAAa,IAAM,OA0DnCqB,MA/Cf,YAYoB,IAAD,IAXjBC,SACE1D,EAUe,EAVfA,GACAqB,EASe,EATfA,eACAsC,EAQe,EARfA,WACAC,EAOe,EAPfA,SACArC,EAMe,EANfA,WACAa,EAKe,EALfA,WAEFJ,EAGiB,EAHjBA,iBACAS,EAEiB,EAFjBA,WACAoB,EACiB,EADjBA,OAEMC,EAAc7B,uBAClB,SAACqB,GACCtB,EAAiBhC,EAAIsD,KAEvB,CAACtD,IAGH,OACE,eAAC0C,EAAD,CAAeI,OAAQ9C,EAAvB,UACE,qBACE+D,UAAU,QACVC,wBAAyB,CAAEC,OAAQL,KAErC,qBAAKG,UAAU,aAAf,SAA6BJ,IAC7B,6BACGpC,EAAW2C,KAAI,SAACC,EAAKhD,GAAN,OACd,cAACiC,EAAD,CACEW,UAAU,SAEVK,QAAS,kBAAMN,EAAYK,IAC3B9C,eAAgBA,EAChBe,WAAYA,EACZkB,cAAea,EACfH,wBAAyB,CAAEC,OAAQE,IAL9BhD,QASX,cAACoC,EAAD,CAAYa,QAAS3B,EAAYL,WAAYA,EAA7C,SACGyB,EAAS,SAAW,a,SC3EdQ,UApBf,WAAiB,IAAD,EACRC,EAA8CC,cACpD,EAAkEpE,EAAO,UACvEmE,EAAS9B,aAD8D,aACvE,EAAgBpC,SADVI,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,aAAcsB,EAAjC,EAAiCA,iBAAkBS,EAAnD,EAAmDA,WAInD,OACE,+BACI+B,kBAAQhE,IACR,cAAC,EAAD,CACEkD,SAAUlD,EAAYE,GACtBsB,iBAAkBA,EAClBS,WAAYA,EACZoB,OAAQrD,EAAYqB,SAAWnB,EAAe,Q,qECjClD+D,EAAe9B,IAAO+B,OAAV,iKACC,SAAC7B,GAAD,OAAWA,EAAME,MAAMG,OAAOC,UAC3B,SAACN,GAAD,OAAWA,EAAME,MAAMC,MAAMC,OAiBpCO,IAJf,SAAgBX,GACd,OAAO,cAAC4B,EAAD,aAAcE,KAAK,UAAa9B","file":"static/js/9.487e3382.chunk.js","sourcesContent":["import { useRef, useEffect } from 'react';\n\nfunction useInterval<T = any>(callback: T, delay: number) {\n  const savedCallback: React.MutableRefObject<T | null> = useRef<T>(null);\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      (savedCallback as any).current();\n    }\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nexport default useInterval;\n","import { useState, useCallback, useEffect } from 'react';\nimport useInterval from './useInterval';\nimport { IResults } from 'api/types';\nimport { useHistory } from 'react-router';\n\nexport interface IQuizItem extends IResults {\n  /**\n   * 배열인덱스를 키값으로 설정\n   */\n  id: number;\n  /**\n   * 랜덤으로 정렬한 전체 퀴즈 문항들\n   */\n  allAnswers: string[];\n  /**\n   * 사용자가 선택한 답안\n   */\n  userAnswer?: string;\n}\n\nfunction useQuiz(results?: IResults[]) {\n  const [progressTime, setProgressTime] = useState(0);\n  const [quizItems, setQuizItems] = useState<IQuizItem[]>();\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [quizCount, setQuizCount] = useState(0);\n  const history = useHistory();\n\n  useEffect(() => {\n    // 문항 순서 랜덤 지정\n    const newQuizItems = results?.reduce(\n      (newQuizItems: IQuizItem[], quiz, idx) => {\n        const currentAnswers = [quiz.correct_answer, ...quiz.incorrect_answers];\n        const allAnswers = [];\n        for (let i = 0; i < 4; i++) {\n          const rand = Math.floor(Math.random() * 2 ** 32);\n          const selectIndex = rand % currentAnswers.length;\n          allAnswers[i] = currentAnswers[selectIndex];\n          currentAnswers.splice(selectIndex, 1);\n        }\n        newQuizItems[idx] = {\n          ...quiz,\n          id: idx,\n          allAnswers,\n        };\n        return newQuizItems;\n      },\n      [],\n    );\n    setQuizItems(newQuizItems);\n    setQuizCount(newQuizItems?.length ?? 0);\n  }, [results]);\n\n  useInterval(() => {\n    setProgressTime((prev) => prev + 1);\n  }, 1000);\n\n  const onSelectQuizItem = useCallback((id: number, selectedAnswer: string) => {\n    setQuizItems((prevState) =>\n      prevState?.reduce((newQuizItems: IQuizItem[], quiz, idx) => {\n        if (id === idx) {\n          newQuizItems[idx] = {\n            ...quiz,\n            userAnswer: selectedAnswer,\n          };\n        } else {\n          newQuizItems[idx] = {\n            ...quiz,\n          };\n        }\n        return newQuizItems;\n      }, []),\n    );\n  }, []);\n\n  const goResultPage = useCallback(() => {\n    history.push({\n      pathname: '/result',\n      state: {\n        results: {\n          progressTime,\n          quizItems,\n        },\n      },\n    });\n  }, [progressTime, quizItems]);\n\n  const onNextQuiz = useCallback(() => {\n    if (currentIndex + 1 !== quizCount) {\n      setCurrentIndex((prev) => prev + 1);\n    } else {\n      goResultPage();\n    }\n  }, [currentIndex, quizCount, goResultPage]);\n\n  return {\n    progressTime,\n    quizItems,\n    currentIndex,\n    onSelectQuizItem,\n    onNextQuiz,\n  };\n}\n\nexport default useQuiz;\n","import { IQuizItem } from 'hooks/useQuiz';\nimport { useCallback } from 'react';\nimport styled from 'styled-components';\nimport Button from 'components/common/Button';\n\nconst QuizContainer = styled.div<{ quizId: number }>`\n  height: 100vh;\n  padding: 5vw;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  .title {\n    font-weight: bold;\n    font-size: 1.5rem;\n    &:before {\n      content: 'Q${(props) => props.quizId + 1}.';\n      width: 10px;\n      height: 10px;\n      margin-right: 8vw;\n      display: inline-block;\n    }\n  }\n  .difficulty {\n    color: white;\n    font-weight: bold;\n    background: ${(props) => props.theme.color.red};\n    border-radius: ${(props) => props.theme.border.radius};\n    width: 25%;\n    text-align: center;\n    padding: 3vw;\n    margin: 2vh 0;\n  }\n  ul {\n    list-style: decimal;\n    padding-inline-start: 6vw;\n  }\n  li {\n    list-style: decimal;\n    font-size: 1.3rem;\n  }\n`;\n\nconst QuizAnswer = styled.li<{\n  correct_answer: string;\n  userAnswer?: string;\n  currentAnswer: string;\n}>`\n  color: ${(props) => {\n    if (\n      props.currentAnswer === props.userAnswer &&\n      props.correct_answer !== props.currentAnswer\n    ) {\n      return props.theme.color.red;\n    } else if (\n      props.userAnswer &&\n      props.correct_answer === props.currentAnswer\n    ) {\n      return `#46bd46`;\n    }\n  }};\n`;\n\nconst NextButton = styled(Button)<{ userAnswer: string | undefined }>`\n  visibility: ${(props) => (props.userAnswer ? 'visibility' : 'hidden')};\n  opacity: ${(props) => (props.userAnswer ? '1' : '0')};\n  transition: opacity 0.3s linear;\n`;\n\ninterface IQuizItemProps {\n  quizItem: IQuizItem;\n  onSelectQuizItem: (id: number, selectedAnswer: string) => void;\n  onNextQuiz: () => void;\n  isLast: boolean;\n}\n\nfunction QuizItem({\n  quizItem: {\n    id,\n    correct_answer,\n    difficulty,\n    question,\n    allAnswers,\n    userAnswer,\n  },\n  onSelectQuizItem,\n  onNextQuiz,\n  isLast,\n}: IQuizItemProps) {\n  const handleClick = useCallback(\n    (currentAnswer: string) => {\n      onSelectQuizItem(id, currentAnswer);\n    },\n    [id],\n  );\n\n  return (\n    <QuizContainer quizId={id}>\n      <div\n        className=\"title\"\n        dangerouslySetInnerHTML={{ __html: question }}\n      ></div>\n      <div className=\"difficulty\">{difficulty}</div>\n      <ul>\n        {allAnswers.map((ans, idx) => (\n          <QuizAnswer\n            className=\"answer\"\n            key={idx}\n            onClick={() => handleClick(ans)}\n            correct_answer={correct_answer}\n            userAnswer={userAnswer}\n            currentAnswer={ans}\n            dangerouslySetInnerHTML={{ __html: ans }}\n          />\n        ))}\n      </ul>\n      <NextButton onClick={onNextQuiz} userAnswer={userAnswer}>\n        {isLast ? 'Result' : 'Next'}\n      </NextButton>\n    </QuizContainer>\n  );\n}\n\nexport default QuizItem;\n","/**\n * 요구사항정리\n * 1. 사용자는 문항에 대한 답안을 4개 보기 중에 선택할 수 있다.\n * 2. 사용자는 답안을 선택하면 다음 문항을 볼 수 있다\n *  - 답안 선택 후 다음 문항 버튼을 볼 수 있다.\n *  - 답안이 맞았는지 틀렸는지 바로 알 수 있다.\n *  - 다음 문항 버튼을 클릭하여 다음 문항으로 이동할 수 있다.\n * 3. 결과 정보\n *  - 퀴즈를 마칠 때까지 소요된 시간\n *  - 정답 개수\n *  - 오답 수\n *  - 정오답에 대한 비율을 차트로 표시(추가 선택)\n *  - 다시 풀기(추가 선택)\n *  - 오답 노트(추가 선택)\n */\nimport { useLocation } from 'react-router-dom';\nimport { Location } from 'history';\nimport { IResults } from 'api/types';\nimport useQuiz from 'hooks/useQuiz';\nimport QuizItem from 'components/quiz/QuizItem';\nimport { isEmpty } from 'lodash';\n\nfunction Main() {\n  const location: Location<{ results: IResults[] }> = useLocation();\n  const { quizItems, currentIndex, onSelectQuizItem, onNextQuiz } = useQuiz(\n    location.state?.results,\n  );\n\n  return (\n    <div>\n      {!isEmpty(quizItems) && (\n        <QuizItem\n          quizItem={quizItems!![currentIndex]}\n          onSelectQuizItem={onSelectQuizItem}\n          onNextQuiz={onNextQuiz}\n          isLast={quizItems!!.length === currentIndex + 1}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Main;\n","import styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  border-radius: ${(props) => props.theme.border.radius};\n  background-color: ${(props) => props.theme.color.red};\n  color: white;\n  font-weight: bold;\n  padding: 15px 15vw;\n  font-size: 1.2rem;\n`;\n\ninterface IButtonProps {\n  children?: React.ReactNode;\n  onClick?: (e?: React.MouseEvent) => void;\n  style?: React.CSSProperties;\n}\n\nfunction Button(props: IButtonProps) {\n  return <StyledButton type=\"submit\" {...props} />;\n}\n\nexport default Button;\n"],"sourceRoot":""}